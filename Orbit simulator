#Orbital Simulator

import math
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation
import time
import pandas as pd
from pandas._libs.tslibs import Timestamp
from vpython import *
import multiprocessing as mp

#Initialising the variables below 

fig = 0
anim = 0
a = 0

G = 6.673e-11  # gravity constant

theplanets = {"1": "Mercury", "2": "Venus, ", "3": "Earth, ","4": "Mars, ", "5":"Jupiter, ", "6":"Saturn, ", "7":"Uranus, ", "8":"Neptune, ","9":" the moon orbiting Earth, ","10":" The solar system or your own orbital bodies." } # Dictionary allows me to change out the values of the planets when I list them.

class colour:    # can colour text 
    Green = '\033[92m'
    End = '\033[0m' # ends the function

# putting everything into a class was necessary to ensure efficient use of lines of code as well as making sure the boundaries encapsulating the orbit always fit the complete trajectory

class Planet:  
    global fig  # making these variables (fig, anim and plt) global was a major breakthrough in the debugging stage.
    global anim
    global plt
    def __init__(self, xaxisname, yaxisname, title, satelliteradius, planetradius, satellitecolor, planetcolor, orbitalradius, period, linecolor): # I initially had the names of the main body and the orbiting body in this class but omitted them as they were unnecessary
        self.xaxisname = xaxisname
        self.yaxisname = yaxisname
        self.title = title
        self.satelliteradius = satelliteradius
        self.planetradius = planetradius
        self.satellitecolor = satellitecolor
        self.planetcolor = planetcolor 
        self.orbitalradius = orbitalradius 
        self.period = period
        self.linecolor = linecolor
        self.setshape() # all these values are listed in order in which they are in the parentheses, for readability and easier access

    def plot(self):
        fig = plt.figure(self.title) # plotting the figure with the title called in the object
        fig.set_size_inches(7, 6.5) # the size of the figure was for visibility. This code makes it 7'' by 6.5''. 
        fig.set_dpi(100) # resolution in dots per inch. Increasing it enlarges the figure in undesirable ways. 
        
        limit = math.ceil(self.orbitalradius+5) # this variable is used to create the parameters of the graph by adding 5 to the orbital radius. This way the graph is a little bigger than the orbital radius. 
        self.ax = plt.axes(xlim=(-limit, limit), ylim=(-limit, limit)) # however, the method outlined above does not always occur and will often result in the trajectory of the satelllite starting out of view.
        self.ax.set_axisbelow(True) # improves visibility of the projectile. 
        self.ax.set_facecolor("black") # enhances the feeling of the simulation being "in space". I did consider adding stars, but this would have used more processing power and slowed down the animation. I also added a grid, however when the sun becomes too small the grid renders it invisible. 

        plt.gca().set_aspect("equal") # creates a square graph to plot the orbit inside
        plt.xlabel(self.xaxisname) # labels the x-axis
        plt.ylabel(self.yaxisname) # labels the y=axis
        plt.title(self.title) # the title of the graph is the same as the title for the figure. 

        axtext = fig.add_axes([0.1,0.92,0.4,0.05])  # creates an axis where the changing text will appear. 
        axtext.axis("off") # Ensures there are no axis numbers cluttering up the figure. 

        timepassed = axtext.text(0.0,0.3, str('Time: '), ha="left", va="top") # This is the text on the left of the timer. It has to be a certain distance left to ensure there is enough room for the growing of the amount of days passed at that point around the orbit. For some orbits like Uranus with a period of 84 years this is really necessary. 
        howmanydays = axtext.text(0.35, 0.3, str('days'), ha="left", va="top") # This presents the amount of days passed at the point the satellite is at around its orbit. 
        self.time = axtext.text(0.25,0.3, float(0.0), ha="center", va="top") # This is the test on the right side of the timer displaying the "days"
        self.line, = self.ax.plot([], [], lw=1)  # This is defining the line later used in the animation. I tried with linewidth 2, but for less wide satellites this would be more accurate. 

        # the following three animation functions all animate different objects on the figure; the satellite, the trail left by the satellite and the main body. 

        anim = animation.FuncAnimation(fig, self.animate, 
                       init_func=self.init, frames=360, interval=1, blit=False)
        plt.show() # This command was pivotal in my development of the program. It used to not be in the code. As a result, the program would return no errors, but would not animate anything. This very simple command was all that was needed. 
        
    def setshape(self): # this function is just for creating the shape. 
        self.patch = plt.Circle((0, 0), self.satelliteradius, fc=self.satellitecolor) # plots the main body
        self.patch2 = plt.Circle((390,390),self.planetradius, fc=self.planetcolor) # plots the orbiting body
        self.xdata, self.ydata = [], [] # these lists define the x and y data
        self.daysrate = float(self.period/36) # the daysrate variable was able to be defined due to finding out the amount of iterations to complete the circle, which turned out to be 36

    def init(self): # initialises the orbiting body
        self.ax.add_patch(self.patch)
        self.ax.add_patch(self.patch2)
        self.line.set_data([], []) # once again setting the data to two lists to pick up all the 
        self.line.set_color(self.linecolor) # sets the linecolour to be the same as the satellite colour
        return self.patch, self.patch2, self.line, # after a bit of fiddling with the code I discovered the comma at the end here was actually necessary formatting for returning self.patch and self.line, as this casts the parameter I am looking to return as a tuple instead of a list.
        
    def animate(self, i): # animates the orbiting body
        x, y = self.patch.center # defines the centre so the following coordinates of x and y have a reference point 
        x = self.orbitalradius * np.sin(np.radians(1.0*i)) # This code is using the unit circle to find the x values for each iteration, however in order to make the orbit of the moon clockwise (purely for intuitive satisfaction) sin and cos are swapped.
        y = self.orbitalradius * np.cos(np.radians(1.0*i)) 
        self.patch.center = (x, y) # centre of the circle
        dayvalue=round(i*self.daysrate) # rounds the days value so a huge float appeared every few seconds, making it very hard to read
        self.time.set_text("{:.1f}".format(float(0.1*dayvalue))) # because of the rounding, the days count is slightly inaccurate but has used as precise values for periods as possible 
        ix, iy = self.patch2.center
        ix = 0 # ensures the x and y coordinates are centred
        iy = 0 # ensures the x and y coordinates are centred
        self.patch2.center = (ix, iy) # ensures the x and y coordinates are centred
        ax = self.orbitalradius * np.sin(np.radians(1.0*i)) # the numpy library was required for this 
        ay = self.orbitalradius * np.cos(np.radians(1.0*i))
        self.xdata.append(ax) # adding x values onto xdata
        self.ydata.append(ay) # adding y values onto ydata
        self.line.set_data(self.xdata, self.ydata) # initially not labelling these with " self. " at the start was a problem
        return self.patch, self.time, self.patch2, self.line,# return these values for use when calling them 

print('')
print(colour.Green + "Welcome to the Circular Orbit Simulator! This simulator can display the orbits of the following systems: \n"+ colour.End) # changing the colour of this text made the program more interesting to look at. I considered doing it with allthe planets, making them names of the planets their actual colours, but it became to visually busy. 
f = open('Introductiontext.txt','r') # reads introduction text file. This allows for the condensation of this file by putting a lot of its text into another file. 
data = f.read() # assigns the read data to the variable "data"
print(data) # prints "data"
f.close # closes the file

f = open('Units.txt','r') # reads 'Units.txt'
udata = f.readlines() # assigns the data from reading the lines in the file to 'udata'
xkm = udata[0] # selects the first line from the file which describes the distance in the x direction 
ykm = udata[1] # selects the first line from the file which describes the distance in the y direction 
f.close # closes the file

while a < 1: # ensures, using an arbitrary value, that a user enters a valid input (one of the planets). Otherwise the loop will keep running. 
    PlanetOrbitChoice = input('Please enter a number corresponding to one of the 11 choices above: ')

    # list of all the options the user can choose from, with the corresponding calling of classes

    if PlanetOrbitChoice == "1":
        Moon = Planet(xkm,ykm,"Moon orbit around Earth", 1.737, 6.371, "white", "cyan", 384.4, 27.322, "white")
        Moon.plot()
        a = 1
    elif PlanetOrbitChoice == "2": # else if the user selects '2'
        scene2 = canvas(title='Mercury orbit around the Sun\n', width=800, height=800, center=vector(5,50,50)) # Defines the "scene" and sets the title. Using Vypython for the orbit of Mercury allows me to more accurately plot the elliptical orbit of this planet.
        Sun = sphere(pos = vector(-11907500,0,0), radius = 696000.340, color = color.orange, make_trail = False) # The value of the radius of the Sun has been multiplied by 1000 so that it is visible. Therfore, the graph is not to scale. 
        Mercury = sphere(pos = vector(57909500,0,0), radius = 696.340, color= color.white, make_trail = True) # sets the size, colour and position of Mercury
        Timecounter = label(pos=vector(-50909500,55909500,0), text="Mercury time is: ", xoffset=0, yoffset=0, height=16, border = 4, font = 'sans') # creates a label which displays how much time has passed as the planet makes its way around the sun
        yradiusmercury = 56672053.3773 # since this is an elliptical orbit, the y radius (semi-minor axis) of the ellipse is less than the y
        xradiusmercury = 57909500 # the semi-major axis of the elliptical orbit
        for degree in range(0, 361, 1): # 361 iterations in this range. 360 covers every degree in a circle, however the animation was stopping just before it would complete the elliptical orbit. Therefore, adding in an extra degree helped complete the orbit.
            rate(30) # this means there are 30 frames per second
            Mercury.pos.x = int(math.cos(degree*math.pi/180)*xradiusmercury) # cos of the degree multiplied by the horizontal distance defines the x-coordinate of Mercury
            Mercury.pos.y = int(math.sin(degree*math.pi/180)*yradiusmercury) # sin of the degree multiplied by the horizontal distance defines the y-coordinate of Mercury
            Timecounter.text = "Time: {:.0f}".format(degree*0.24444444) + " days" # displays the amount of time that has passed in days
        a = 1
    elif PlanetOrbitChoice == "3":
        Venus = Planet(xkm,ykm,"Venus orbit around the Sun", 6.0518, 696.340, "white", "yellow", 108000, 225.65, "white")

        Venus.plot()
        a = 1
    elif PlanetOrbitChoice == "4":
        Earth = Planet(xkm,ykm, "Earth orbit around the sun", 6.371, 696.340, "cyan", "yellow", 150450, 365.2422,"cyan")
        Earth.plot()
        a = 1
    elif PlanetOrbitChoice == "5":
        Mars = Planet(xkm,ykm,"Mars orbit around the Sun", 3.3895, 696.340, "red", "yellow", 295070, 686.98, "red")
        Mars.plot()
        a = 1
    elif PlanetOrbitChoice == "6":
        Jupiter = Planet(xkm,ykm,"Jupiter orbit around the Sun", 69.911, 696.340, "orange", "yellow", 757260, 4332.59, "orange")
        Jupiter.plot()
        a = 1
    elif PlanetOrbitChoice == "7":
        Saturn = Planet(xkm,ykm,"Saturn orbit around the Sun", 58.232, 696.340, "brown", "yellow", 1488600, 10756, "brown")
        Saturn.plot()
        a = 1
    elif PlanetOrbitChoice == "8":
        Uranus = Planet(xkm,ykm,"Uranus orbit around the Sun", 25.362, 696.340, "cyan", "yellow", 2955200, 30680.3448, "cyan")
        Uranus.plot()
        a = 1
    elif PlanetOrbitChoice == "9":
        Neptune = Planet(xkm,ykm,"Neptune orbit around the Sun", 24.622, 696.340, "blue", "yellow", 4475600, 60182, "blue")
        Neptune.plot()
        a = 1
    elif PlanetOrbitChoice == "10":
        Centralbodymass = float(input("\nPlease enter the mass of the central body in kg.\n(Please use e to represent multiplying by a factor of 10. For example, x10^24 would be e24): ")) # This component of the code is to allow th user more freedom, however it can quickly go wrong. Values that aren't within a specific range will cause one planet to be the size of the entire screen whilst the other" "orbits" it. What could be done is that there is a range users can realistically input without one planet blocking the view of the animation and making an unrealistic orbit. 
        Centralbodyradiusraw = float(input("Please enter the radius of the central body in km: ")) # raw input allows for a manipulation when passing it into an equation 
        Centralbodyradius = Centralbodyradiusraw/1000 # dividing by 1000 converts the value into metres for use in an orbital physics equation
        Satelliteradiusraw = float(input("Please enter the radius of the natural satellite in km: "))
        Satelliteradius = Satelliteradiusraw/1000
        Distanceraw = float(input("Please enter the distance between the centres of these two objects in km: "))
        Distanceforgraph = float(Distanceraw/1000) # again, converting units to be able to use an equation which relates to gravitational force = g*m1*m2 / r^2
        Distance = 1000*Distanceraw
        Periodinseconds = (2*math.pi)*(math.sqrt((Distance*Distance*Distance)/(G*Centralbodymass))) # rearranging of a few equations to find the orbital period
        Periodindays = float(Periodinseconds/86400) 
        CustomPlanet = Planet("X-displacement from central body in units of 1000km","Y-displacement from central body in units of 1000km","Your satellite's orbit around the central body",Satelliteradius,Centralbodyradius,"white","brown",Distanceforgraph,Periodindays,"white")
        CustomPlanet.plot()
        a = 1
    elif PlanetOrbitChoice == "11":
        scene = canvas(title='Solar System\n', width=800, height=800, center=vector(5,50,50), background=color.black) # defining this scene as scene2 instead of just scene as was done with Mercury

        Sun = sphere(pos = vector(-11907500,0,0), radius = 696340, color = color.orange, make_trail = False) # The value of the radius of the Sun has been multiplied by 1000 so that it is visible. Therfore, the graph is not to scale. 
        Mercury = sphere(pos = vector(57909500,0,0), radius = 2439.7, color= color.white, make_trail = True) # Creates Mercury
        Venus = sphere(pos = vector(108207500, 0, 0), radius = 6051.8, color = color.orange, make_trail = True) # Creates Venus
        Earth = sphere(pos = vector(149600000, 0, 0), radius = 6371, color = color.blue, make_trail = True) # Creates Earth
        Mars = sphere(pos = vector(227923000, 0, 0), radius = 3389.5, color = color.red, make_trail = True) # Creates Mars
        Mercurylabel = label(pos=vector(-50009500,50909500,0), xoffset=0, yoffset=0, height=16, border = 4, font = 'sans') # Places the label for Mercury close to Mercury orbit
        Venuslabel = label(pos=vector(-90205027,87205027,0), xoffset=0, yoffset=0, color = vector(1, 0.6, 0), height=16, border = 4, font = 'sans') # Places the label for Venus close to Venus orbit
        Earthlabel = label(pos=vector(-120579110,120579110,0), xoffset=0, yoffset=0, color = vector(0, 0, 1), height=16, border = 4, font = 'sans') # Places the label for Earth close to Earth orbit
        Sunlabel = label(pos=vector(10000000,-10000000,0), xoffset=0, yoffset=0, color = vector(1, 0.7, 0), height=16, border = 4, font = 'sans') # Places the label for the Sun close to the Sun
        Marslabel = label(pos=vector(-156924984, 156924984, 0), xoffset=0, yoffset=0, color = vector(1, 0, 0), height=16, border = 4, font = 'sans') # Places the label for Mars close to Mars orbit
        Timecounter = label(pos=vector(-207923000,227923000,0), xoffset=0, yoffset=0, height=16, border = 4, font = 'sans') # Label for how much time has passed in the period it's takes for the planet to orbit the sun
        SecondTimecounter = label(pos=vector(-186934000,210000000,0), xoffset=0, yoffset=0, height=16, border = 4, font = 'sans') # Label for how much time has passed, in terms of days, months and years from the year 2000 
        Datelabel = label(pos=vector(-228934000,210000000,0), xoffset=0, yoffset=0, height=16, border = 4, font = 'sans') # Displays text

        # The semi-major and semi-minor axises 

        yradiusmercury = 56672053.3773
        xradiusmercury = 57909500
        yradiusvenus = 108205027
        xradiusvenus = 108207500
        yradiusearth = 149579110
        xradiusearth = 149600000
        yradiusmars = 226924984
        xradiusmars = 227923000

        for degree in range(0, 1100, 1): # the range of 1000 allows for Mars to make a full period
            rate(30) # 30 frames per second. Implementing Vpython allowed for a smoother animation. 
            Mercury.pos.x = int(math.cos(2.55681818182*degree*math.pi/180)*xradiusmercury) # the float before the degree adjusts the rate the planet moves, ensuring its velocity corresponds to its velocity relative to the other planets
            Mercury.pos.y = int(math.sin(2.55681818182*degree*math.pi/180)*yradiusmercury)
            Venus.pos.x = int(math.cos(degree*math.pi/180)*xradiusvenus)
            Venus.pos.y = int(math.sin(degree*math.pi/180)*yradiusvenus)
            Earth.pos.x = int(math.cos(0.616438356164*degree*math.pi/180)*xradiusearth)
            Earth.pos.y = int(math.sin(0.616438356164*degree*math.pi/180)*yradiusearth)
            Mars.pos.x = int(math.cos(0.327510917031*degree*math.pi/180)*xradiusmars)
            Mars.pos.y = int(math.sin(0.327510917031*degree*math.pi/180)*yradiusmars)
            Mercurylabel.text = "Mercury"
            Venuslabel.text = "Venus"
            Earthlabel.text = "Earth"
            Marslabel.text = "Mars"
            Sunlabel.text = "The Sun"
            timeincrement = round(degree*0.625) # adjusts the rate of dt
            Timecounter.text = "Time: {:.0f}".format(timeincrement) + " days" # displays how many days have passed in the time period
            daysvalue = (365*30 + timeincrement) # 365*30 makes sure the time counter starts at January 1st, 2000
            SecondTimecounter.text = pd.to_datetime(daysvalue, unit='D').date() # ensures that only the date and not the time, which would just print 00:00:00, gets displayed
            Datelabel.text = "Date:" # Displays the text "date"
        a = 1
    else:
        print("Please enter a valid option. You can choose one of the planets: ") # error handling.   
        print(theplanets["1"], theplanets["2"], theplanets["3"], theplanets["4"], theplanets["5"], theplanets["6"], theplanets["7"], theplanets["8"], theplanets["9"], theplanets["10"]) # list of the planets

